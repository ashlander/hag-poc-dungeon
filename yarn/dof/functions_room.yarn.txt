// room constants
title: DofFunctionInitRoomConstants
---
    <<set $dofRoomChestMaxLoot to 4>>
    <<set $dofRoomTrapMaxLoot  to 1>>
===

/**
 * @brief generates random room
 * @param DofFunctionGenerateRoom_room Room name
 * expected
 *  dofX
 *  dofY
 */
title: DofFunctionGenerateRoom
---
    // clear previous room actor in order remove garbage
    <<hagActorRemove name="($_room)">>

    // calculate room distance
    <<set $_absX to abs($_room.$dofX)>>
    <<set $_absY to abs($_room.$dofY)>>
    <<set $_entranceDistance to sqrt($_absX*$_absX + $_absY*$_absY)>>
    <<if $_entranceDistance <= 0>>
        <<set $_entranceDistance to 1>>
    <<endif>>

    // control number of room objects
    <<set $_objectsCount to 0>>

    // generate exit
    <<if $_room.$dofX is 0 and $_room.$dofY is 0>>
        <<set $_room.$dofHasExit to true>>
        <<set $_objectsCount to $_objectsCount + 1>>
    <<endif>>

    // generate trader
    <<set $DofFunctionDiceRoll_room to $dofRandomRoomTrader>>
    <<hagCallNode name="DofFunctionDiceRoll">>
    <<if $dofRandomRoomTrader.$dofRollPositive>>
        // TODO generate content
        <<set $_room.$dofHasTrader to true>>
        <<set $_objectsCount to $_objectsCount + 1>>
    <<endif>>

    // generate altar
    <<set $DofFunctionDiceRoll_actor to $dofRandomRoomAltar>>
    <<hagCallNode name="DofFunctionDiceRoll">>
    <<if $dofRandomRoomAltar.$dofRollPositive>>
        // TODO generate content
        <<set $_room.$dofHasAltar to true>>
        <<set $_objectsCount to $_objectsCount + 1>>
    <<endif>>

    // generate chest
    <<set $DofFunctionDiceRoll_actor to $dofRandomRoomChest>>
    <<hagCallNode name="DofFunctionDiceRoll">>
    <<if $dofRandomRoomChest.$dofRollPositive>>
        // generate room chest content
        <<set $DofFunctionGenerateRoomChest_room to $_room>>
        <<set $DofFunctionGenerateRoomChest_slot to "{$dofNameChestItemSlot}">>
        <<set $DofFunctionGenerateRoomChest_distance to $_entranceDistance>>
        <<hagCallNode name="DofFunctionGenerateRoomChest">>
        <<set $_room.$dofHasChest to true>>
        <<set $_objectsCount to $_objectsCount + 1>>
    <<endif>>

    // generate enemy
    <<set $DofFunctionDiceRoll_actor to $dofRandomRoomEnemy>>
    <<hagCallNode name="DofFunctionDiceRoll">>
    <<if $dofRandomRoomEnemy.$dofRollPositive>>
        // TODO generate content
        <<set $_room.$dofHasEnemy to true>>
        <<set $_objectsCount to $_objectsCount + 1>>
    <<endif>>

    // generate event
    <<set $DofFunctionDiceRoll_actor to $dofRandomRoomEvent>>
    <<hagCallNode name="DofFunctionDiceRoll">>
    <<if $dofRandomRoomEvent.$dofRollPositive>>
        // TODO generate content
        <<set $_room.$dofHasEvent to true>>
        <<set $_objectsCount to $_objectsCount + 1>>
    <<endif>>

    // extra chest
    <<if $_objectsCount <= $dofRoomAreaMaxId>>
        <<set $DofFunctionDiceRoll_actor to $dofRandomRoomChest>>
        <<hagCallNode name="DofFunctionDiceRoll">>
        <<if $dofRandomRoomChest.$dofRollPositive>>
            // generate room chest content
            <<set $DofFunctionGenerateRoomChest_room to $_room>>
            <<set $DofFunctionGenerateRoomChest_slot to "{$dofNameAltChestItemSlot}">>
            <<set $DofFunctionGenerateRoomChest_distance to $_entranceDistance>>
            <<hagCallNode name="DofFunctionGenerateRoomChest">>
            <<set $_room.$dofHasChest2 to true>>
            <<set $_objectsCount to $_objectsCount + 1>>
        <<endif>>
    <<endif>>

    // extra enemy
    <<if $_objectsCount <= $dofRoomAreaMaxId>>
        <<set $DofFunctionDiceRoll_actor to $dofRandomRoomEnemy>>
        <<hagCallNode name="DofFunctionDiceRoll">>
        <<if $dofRandomRoomEnemy.$dofRollPositive>>
            // TODO generate content
            <<set $_room.$dofHasEnemy2 to true>>
            <<set $_objectsCount to $_objectsCount + 1>>
        <<endif>>
    <<endif>>

    // generate room areas
    <<set $DofFunctionGenerateRoomAreas_room to $_room>>
    <<hagCallNode name="DofFunctionGenerateRoomAreas">>
===

/**
 * @brief generates room areas
 * @param DofFunctionGenerateRoomAreas_room Room name
 */
title: DofFunctionGenerateRoomAreas
---
    // initialize free areas
    <<set $_index to $dofRoomAreaMinId>>
    <<while $_index <= $dofRoomAreaMaxId>>
        <<set $_area to "{$_room}{$dofNameRoomArea}{$_index}">>
        <<hagActorRemove name="{$_area}">> // clean up
        <<set $_area.$dofFree to true>>
        <<set $_index to $_index + 1>>
    <<endwhile>>

    // put exit
    <<if $_room.$dofHasExit>>
        <<set $_area to "{$_room}{$dofNameRoomArea}{$dofRoomAreaRTId}">>
        <<set $_area.$dofFree to false>>
        <<set $_area.$dofHasExit to true>>
    <<endif>>

    // put trader
    <<if $_room.$dofHasTrader>>
        <<set $DofFunctionGetRoomFreeArea_room to $_room>>
        <<hagCallNode name="DofFunctionGetRoomFreeArea">>
        <<if $DofFunctionGetRoomFreeArea_found>>
            <<set $_area to "{$_room}{$dofNameRoomArea}{$DofFunctionGetRoomFreeArea_index}">>
            <<set $_area.$dofFree to false>>
            <<set $_area.$dofHasTrader to true>>
        <<endif>>
    <<endif>>

    // put chest
    <<if $_room.$dofHasChest>>
        <<set $DofFunctionGetRoomFreeArea_room to $_room>>
        <<hagCallNode name="DofFunctionGetRoomFreeArea">>
        <<if $DofFunctionGetRoomFreeArea_found>>
            <<set $_area to "{$_room}{$dofNameRoomArea}{$DofFunctionGetRoomFreeArea_index}">>
            <<set $_area.$dofFree to false>>
            <<set $_area.$dofHasChest to true>>
        <<endif>>
    <<endif>>

    // put alt chest
    <<if $_room.$dofHasChest2>>
        <<set $DofFunctionGetRoomFreeArea_room to $_room>>
        <<hagCallNode name="DofFunctionGetRoomFreeArea">>
        <<if $DofFunctionGetRoomFreeArea_found>>
            <<set $_area to "{$_room}{$dofNameRoomArea}{$DofFunctionGetRoomFreeArea_index}">>
            <<set $_area.$dofFree to false>>
            <<set $_area.$dofHasChest2 to true>>
        <<endif>>
    <<endif>>

    // put altar
    <<if $_room.$dofHasAltar>>
        <<set $DofFunctionGetRoomFreeArea_room to $_room>>
        <<hagCallNode name="DofFunctionGetRoomFreeArea">>
        <<if $DofFunctionGetRoomFreeArea_found>>
            <<set $_area to "{$_room}{$dofNameRoomArea}{$DofFunctionGetRoomFreeArea_index}">>
            <<set $_area.$dofFree to false>>
            <<set $_area.$dofHasAltar to true>>
        <<endif>>
    <<endif>>

    // put enemy
    <<if $_room.$dofHasEnemy>>
        <<set $DofFunctionGetRoomFreeArea_room to $_room>>
        <<hagCallNode name="DofFunctionGetRoomFreeArea">>
        <<if $DofFunctionGetRoomFreeArea_found>>
            <<set $_area to "{$_room}{$dofNameRoomArea}{$DofFunctionGetRoomFreeArea_index}">>
            <<set $_area.$dofFree to false>>
            <<set $_area.$dofHasEnemy to true>>
        <<endif>>
    <<endif>>

    // put alt enemy
    <<if $_room.$dofHasEnemy2>>
        <<set $DofFunctionGetRoomFreeArea_room to $_room>>
        <<hagCallNode name="DofFunctionGetRoomFreeArea">>
        <<if $DofFunctionGetRoomFreeArea_found>>
            <<set $_area to "{$_room}{$dofNameRoomArea}{$DofFunctionGetRoomFreeArea_index}">>
            <<set $_area.$dofFree to false>>
            <<set $_area.$dofHasEnemy2 to true>>
        <<endif>>
    <<endif>>

    // put event
    <<if $_room.$dofHasEvent>>
        <<set $DofFunctionGetRoomFreeArea_room to $_room>>
        <<hagCallNode name="DofFunctionGetRoomFreeArea">>
        <<if $DofFunctionGetRoomFreeArea_found>>
            <<set $_area to "{$_room}{$dofNameRoomArea}{$DofFunctionGetRoomFreeArea_index}">>
            <<set $_area.$dofFree to false>>
            <<set $_area.$dofHasEvent to true>>
        <<endif>>
    <<endif>>
===

/**
 * @brief generates some amount of money
 * @param DofFunctionGetRoomFreeArea_room Room name
 * @return DofFunctionGetRoomFreeArea_index Free room index
 * @return DofFunctionGetRoomFreeArea_found Index is valid free area
 */
title: DofFunctionGetRoomFreeArea
---
    <<set $_loopNum to 0>> // to avoid endless loop when no free area
    <<set $_found to false>>
    <<while not $_found and $_loopNum < $dofRoomAreaMaxId>>
        <<set $_index to random($dofRoomAreaMinId, $dofRoomAreaMaxId)>>
        // exclude player
        <<if $_index is not $dofRoomAreaLBId>>
            // exclude doors
            <<if $_index is not $dofRoomAreaRMTId and $_index is not $dofRoomAreaLMId and $_index is not $dofRoomAreaRMId and $_index is not $dofRoomAreaRMBId>>
                // exclude exit
                <<if not $_room.$dofHasExit or $_index is not $dofRoomAreaRTId>>
                    // exclude not free
                    <<set $_area to "{$_room}{$dofNameRoomArea}{$_index}">>
                    <<if $_area.$dofFree>>
                        <<set $_found to true>>
                    <<endif>>
                <<endif>>
            <<endif>>
        <<endif>>

        <<set $_loopNum to $_loopNum + 1>>
    <<endwhile>>
===

/**
 * @brief Add room view based on generated values
 * @param DofFunctionAddMapRoom_room Room name
 * @param DofFunctionAddMapRoom_readonly No onclick should be specified
 */
title: DofFunctionAddMapRoom_Params
---
    <<set $DofFunctionAddMapRoom_room to "">>
    <<set $DofFunctionAddMapRoom_readonly to false>>
===
title: DofFunctionAddMapRoom
---
    <<set $DofFunctionAddMapRoomArea_room to $_room>>

    // make dynamic areas to show in the same mode
    <<set $DofFunctionAddMapRoomArea_readonly to $_readonly>>

    // upper row
    <<set $DofFunctionAddMapRoomArea_area to "{$_room}{$dofNameRoomArea}{$dofRoomAreaLTId}">>
    <<set $DofFunctionAddMapRoomArea_path to "{$dofImageLeftTopGround}">>
    <<hagCallNode name="DofFunctionAddMapRoomArea">>

    <<set $DofFunctionAddMapRoomArea_area to "{$_room}{$dofNameRoomArea}{$dofRoomAreaLMTId}">>
    <<set $DofFunctionAddMapRoomArea_path to "{$dofImageTopGround}">>
    <<hagCallNode name="DofFunctionAddMapRoomArea">>

    <<hagHighlightBlockSet type=image>>
    <<if $_readonly>>
        <<hagHighlightBlockNoteAdd path="{$dofImageTopDoor}"                    style="room">>
    <<else>>
        <<hagHighlightBlockNoteAdd path="{$dofImageTopDoor}"                    style="room" onclick="TopDoor" >>
    <<endif>>

    <<set $DofFunctionAddMapRoomArea_area to "{$_room}{$dofNameRoomArea}{$dofRoomAreaRTId}">>
    <<set $DofFunctionAddMapRoomArea_path to "{$dofImageRightTopGround}">>
    <<hagCallNode name="DofFunctionAddMapRoomArea">>


    // mid row
    <<hagHighlightBlockSet type=image>>
    <<if $_readonly>>
        <<hagHighlightBlockNoteAdd path="{$dofImageLeftDoor}"                   style="room">>
    <<else>>
        <<hagHighlightBlockNoteAdd path="{$dofImageLeftDoor}"                   style="room" onclick="LeftDoor">>
    <<endif>>

    <<set $DofFunctionAddMapRoomArea_area to "{$_room}{$dofNameRoomArea}{$dofRoomAreaLMMId}">>
    <<set $DofFunctionAddMapRoomArea_path to "{$dofImageMiddleGround}">>
    <<hagCallNode name="DofFunctionAddMapRoomArea">>

    <<set $DofFunctionAddMapRoomArea_area to "{$_room}{$dofNameRoomArea}{$dofRoomAreaRMMId}">>
    <<set $DofFunctionAddMapRoomArea_path to "{$dofImageMiddleGround}">>
    <<hagCallNode name="DofFunctionAddMapRoomArea">>

    <<hagHighlightBlockSet type=image>>
    <<if $_readonly>>
        <<hagHighlightBlockNoteAdd path="{$dofImageRightDoor}"                  style="room">>
    <<else>>
        <<hagHighlightBlockNoteAdd path="{$dofImageRightDoor}"                  style="room" onclick="RightDoor">>
    <<endif>>


    // bottom row
    <<set $DofFunctionAddMapRoomArea_area to "{$_room}{$dofNameRoomArea}{$dofRoomAreaLBId}">>
    <<set $DofFunctionAddMapRoomArea_area.$dofHasPlayer to true>> // player character here
    <<set $DofFunctionAddMapRoomArea_path to "{$dofImageLeftBottomGround}">>
    <<hagCallNode name="DofFunctionAddMapRoomArea">>

    <<hagHighlightBlockSet type=image>>
    <<if $_readonly>>
        <<hagHighlightBlockNoteAdd path="{$dofImageBottomDoor}"                 style="room">>
    <<else>>
        <<hagHighlightBlockNoteAdd path="{$dofImageBottomDoor}"                 style="room" onclick="BottomDoor">>
    <<endif>>

    <<set $DofFunctionAddMapRoomArea_area to "{$_room}{$dofNameRoomArea}{$dofRoomAreaRMBId}">>
    <<set $DofFunctionAddMapRoomArea_path to "{$dofImageBottomGround}">>
    <<hagCallNode name="DofFunctionAddMapRoomArea">>

    <<set $DofFunctionAddMapRoomArea_area to "{$_room}{$dofNameRoomArea}{$dofRoomAreaRBId}">>
    <<set $DofFunctionAddMapRoomArea_path to "{$dofImageRightBottomGround}">>
    <<hagCallNode name="DofFunctionAddMapRoomArea">>

===

/**
 * @brief Add area view based on generated values
 * @param DofFunctionAddMapRoomArea_room Room name
 * @param DofFunctionAddMapRoomArea_area Room area name
 * @param DofFunctionAddMapRoomArea_path Path to ground image
 * @param DofFunctionAddMapRoomArea_readonly No onclick should be specified
 */
title: DofFunctionAddMapRoomArea
---
    <<set $_generated to $_path>>
    <<set $_onclick to "">>
    <<if $_area.$dofHasExit>>
        <<set $_generated to "{$_path}+exit.generated.png">>
        <<hagImage check_missing path="{$_generated}" init path="{$_path}" add path="{$dofImageExit}" dst-pdx=-2 dst-pdy=-59 save path="{$_generated}">>
        <<set $_onclick to "Exit">>

    <<elseif $_area.$dofHasPlayer>>
        <<set $_generated to "{$_path}+player.generated.png">>
        <<hagImage check_missing path="{$_generated}" init path="{$_path}" add path="{$dofImageCommonPlayer}" dst-pdx=15 dst-pdy=28 save path="{$_generated}">>
        <<set $_onclick to "Player">>

    <<elseif $_area.$dofHasChest>>
        <<set $_chest to "{$_room}{$dofNameChestItemSlot}">>
        <<if $_chest.$dofStatSneak <= $dofPlayer.dofStatPerception>>
            <<if $_chest.$dofLocked>>
                <<set $_generated to "{$_path}+chestlocked.generated.png">>
                <<hagImage check_missing path="{$_generated}" init path="{$_path}" add path="{$dofImageChestClosed}" dst-pdx=-15 dst-pdy=-50 save path="{$_generated}">>
                <<set $_onclick to "ChestLocked">>
            <<elseif $_chest.$dofSmashed>>
                <<set $_generated to "{$_path}+chestsmashed.generated.png">>
                <<hagImage check_missing path="{$_generated}" init path="{$_path}" add path="{$dofImageChestSmashed}" dst-pdx=-15 dst-pdy=-50 save path="{$_generated}">>
                <<set $_onclick to "ChestSmashed">>
            <<else>>
                <<set $_generated to "{$_path}+chest.generated.png">>
                <<hagImage check_missing path="{$_generated}" init path="{$_path}" add path="{$dofImageChest}" dst-pdx=-15 dst-pdy=-50 save path="{$_generated}">>
                <<set $_onclick to "Chest">>
            <<endif>>
        <<endif>>

    <<elseif $_area.$dofHasChest2>>
        <<set $_chest to "{$_room}{$dofNameAltChestItemSlot}">>
        <<if $_chest.$dofStatSneak <= $dofPlayer.dofStatPerception>>
            <<if $_chest.$dofLocked>>
                <<set $_generated to "{$_path}+chestlocked.generated.png">>
                <<hagImage check_missing path="{$_generated}" init path="{$_path}" add path="{$dofImageChestClosed}" dst-pdx=-15 dst-pdy=-50 save path="{$_generated}">>
                <<set $_onclick to "AltChestLocked">>
            <<elseif $_chest.$dofSmashed>>
                <<set $_generated to "{$_path}+chestsmashed.generated.png">>
                <<hagImage check_missing path="{$_generated}" init path="{$_path}" add path="{$dofImageChestSmashed}" dst-pdx=-15 dst-pdy=-50 save path="{$_generated}">>
                <<set $_onclick to "AltChestSmashed">>
            <<else>>
                <<set $_generated to "{$_path}+chest.generated.png">>
                <<hagImage check_missing path="{$_generated}" init path="{$_path}" add path="{$dofImageChest}" dst-pdx=-15 dst-pdy=-50 save path="{$_generated}">>
                <<set $_onclick to "AltChest">>
            <<endif>>
        <<endif>>

    <<elseif $_area.$dofHasTrader>>
        <<set $_generated to "{$_path}+trader.generated.png">>
        <<hagImage check_missing path="{$_generated}" init path="{$_path}" add path="{$dofImageTrader}" dst-pdx=15 dst-pdy=28 save path="{$_generated}">>
        <<set $_onclick to "Trader">>

    <<elseif $_area.$dofHasAltar>>
        <<set $_generated to "{$_path}+altar.generated.png">>
        <<hagImage check_missing path="{$_generated}" init path="{$_path}" add path="{$dofImageAltar}" dst-pdx=0 dst-pdy=-26 save path="{$_generated}">>
        <<set $_onclick to "Altar">>

    <<elseif $_area.$dofHasEnemy>>
        <<set $_enemy to 1>>
        <<set $_enemy to random(1,5)>> // TODO add enemy generation, just changing image for now
        <<set $_generated to "{$_path}+enemy{$_enemy}.generated.png">>
        <<hagImage check_missing path="{$_generated}" init path="{$_path}" add path="{$dofImageEnemyPartPath}{$_enemy}.png" dst-pdx=10 dst-pdy=28 save path="{$_generated}">>
        <<set $_onclick to "Enemy{$_enemy}">>

    <<elseif $_area.$dofHasEnemy2>>
        <<set $_enemy to 1>>
        <<set $_enemy to random(1,5)>> // TODO add enemy generation, just changing image for now
        <<set $_generated to "{$_path}+enemy{$_enemy}.generated.png">>
        <<hagImage check_missing path="{$_generated}" init path="{$_path}" add path="{$dofImageEnemyPartPath}{$_enemy}.png" dst-pdx=10 dst-pdy=28 save path="{$_generated}">>
        <<set $_onclick to "Enemy{$_enemy}">>

    <<elseif $_area.$dofHasEvent>>
        <<set $_generated to "{$_path}+event.generated.png">>
        <<hagImage check_missing path="{$_generated}" init path="{$_path}" add path="{$dofImageEvent}" dst-pdx=15 dst-pdy=28 save path="{$_generated}">>
        <<set $_onclick to "Event">>
    <<endif>>

    <<hagHighlightBlockSet type=image>>
    <<if not $_readonly and $_onclick is not "">>
        <<hagHighlightBlockNoteAdd path="{$_generated}" style="room" onclick="{$_onclick}">>
    <<else>>
        <<hagHighlightBlockNoteAdd path="{$_generated}" style="room">>
    <<endif>>
===

/**
 * @brief Show player inventory and equipment
 */
title: DofFunctionShowRoomPlayer
---
    <<hagHistoryClean>>

    // show player with stats
    <<hagCallNode name="DofFunctionAddPlayerImage">>
    <<set $DofFunctionAddNpcStatsShort_actor to "dofPlayer">>
    <<hagCallNode name="DofFunctionAddNpcStatsShort">>
    <<set $DofFunctionAddNpcSecondaryStats_actor to "dofPlayer">>
    <<hagCallNode name="DofFunctionAddNpcSecondaryStats">>

    // show equipment title
    <<hagCallNode name="DofFunctionAddEmptyBlock">>
    <<hagCallNode name="DofFunctionAddPlayerEquipmentTitle">>
    <<hagCallNode name="DofFunctionAddEmptyBlock">>

    // show equipment items
    <<hagCallNode name="DofFunctionAddPlayerEquipment">>

    // show inventory title
    <<hagCallNode name="DofFunctionAddEmptyBlock">>
    <<hagCallNode name="DofFunctionAddPlayerInventoryTitle">>
    <<hagCallNode name="DofFunctionAddEmptyBlock">>

    // show inventory items
    <<hagCallNode name="DofFunctionAddPlayerInventory">>

    <<hagHighlightBlocksShow columns=3 center=true>>
===

/**
 * @brief Show npc stats
 * @param DofFunctionShowRoomNpc_actor Actor name
 */
title: DofFunctionShowRoomNpc
---
    <<hagHistoryClean>>

    <<set $_link to $_actor.$dofLink>>

    // show image
    <<if $_link is not "">>
        <<hagHighlightBlockSet type=image>>
        <<hagHighlightBlockNoteAdd path="{$_link.$dofImage}">>
    <<else>>
        <<hagCallNode name="DofFunctionAddEmptyBlock">>
    <<endif>>

    // show stats
    <<set $DofFunctionAddNpcStats_actor to $_actor>>
    <<hagCallNode name="DofFunctionAddNpcStats">>

    // show description
    <<if $_link is not "">>
        <<hagHighlightBlockSet type=info>>
        <<hagHighlightBlockNoteAdd text="{$_link.$dofDescription}">>
    <<else>>
        <<hagCallNode name="DofFunctionAddEmptyBlock">>
    <<endif>>

    <<hagHighlightBlocksShow columns=3 center=true>>
===

/**
 * @brief Show npc stats vs player stats
 * @param DofFunctionShowRoomNpc_actor Actor name
 */
title: DofFunctionShowRoomNpcVsPlayer
---
    <<hagHistoryClean>>

    // show player image
    <<hagCallNode name="DofFunctionAddPlayerImage">>

    // show player with stats
    <<set $DofFunctionAddNpcStatsShort_actor to "dofPlayer">>
    <<hagCallNode name="DofFunctionAddNpcStatsShort">>

    // show stats
    //<<set $DofFunctionAddNpcStatsShort_actor to $_actor>>
    //<<hagCallNode name="DofFunctionAddNpcStatsShort">>
    <<set $DofFunctionAddNpcVisibleStats_actor to $_actor>>
    <<hagCallNode name="DofFunctionAddNpcVisibleStats">>

    // show image
    <<set $_link to $_actor.$dofLink>>
    //DEBUG: [{$_link}] *** {$_link.$dofImage} *** {$_link.$dofDescription}
    <<if $_link is not "">>
        <<hagHighlightBlockSet type=image>>
        <<hagHighlightBlockNoteAdd path="{$_link.$dofImage}">>
    <<else>>
        <<hagCallNode name="DofFunctionAddEmptyBlock">>
    <<endif>>

    // show description
    <<if $_link is not "">>
        <<hagHighlightBlockSet type=info>>
        <<hagHighlightBlockNoteAdd text="{$_link.$dofDescription}">>
    <<else>>
        <<hagCallNode name="DofFunctionAddEmptyBlock">>
    <<endif>>

    <<hagHighlightBlocksShow columns=4 center=true>>
===

/**
 * @brief Check room container is empty
 * @param DofFunctionCheckRoomContainerEmpty_room Room name
 * @param DofFunctionCheckRoomContainerEmpty_slotname Slot name
 * @return DofFunctionCheckRoomContainerEmpty_empty If container is empty
 */
title: DofFunctionCheckRoomContainerEmpty
---
    <<set $DofFunctionCheckContainerEmpty_slot to "{$_room}{$_slotname}0">>
    <<hagCallNode name="DofFunctionCheckContainerEmpty">>
    <<set $_empty to $DofFunctionCheckContainerEmpty_empty>>
===

/**
 * @brief Remove chest from area
 * @param DofFunctionHideChest_room Room name
 * @param DofFunctionHideChest_alt True if second chest needs to be hidden
 */
title: DofFunctionHideChest
---
    // clear room flags
    <<if $_alt>>
        <<set $_room.$dofHasChest2 to false>>
    <<else>>
        <<set $_room.$dofHasChest to false>>
    <<endif>>

    // initialize free areas
    <<set $_index to $dofRoomAreaMinId>>
    <<while $_index <= $dofRoomAreaMaxId>>
        <<set $_area to "{$_room}{$dofNameRoomArea}{$_index}">>
        <<if $_alt>>
            <<if $_area.$dofHasChest2>>
                <<set $_area.$dofHasChest2 to false>>
                <<set $_area.$dofFree to true>>
            <<endif>>
        <<else>>
            <<if $_area.$dofHasChest>>
                <<set $_area.$dofHasChest to false>>
                <<set $_area.$dofFree to true>>
            <<endif>>
        <<endif>>
        <<set $_index to $_index + 1>>
    <<endwhile>>
===

/**
 * @brief Generates npc visibility
 * @param DofFunctionGenerateNpcVisibility_observer Observer name
 * @param DofFunctionGenerateNpcVisibility_actor Npc name
 */
title: DofFunctionGenerateNpcVisibility_Params
---
    <<set $DofFunctionGenerateNpcVisibility_observer to "">>
    <<set $DofFunctionGenerateNpcVisibility_actor to "">>
===
title: DofFunctionGenerateNpcVisibility
---
    <<set $_visible to $_observer.$dofStatPerception + $_observer.$dofStatListen - $_actor.$dofStatSneak - $_actor.$dofStatDefense>>

    <<if $_visible >= $dofStatsCount>> // all stats are visible
        <<set $_actor.$dofHideStatConstitution            to false>>
        <<set $_actor.$dofHideStatListen                  to false>>
        <<set $_actor.$dofHideStatPerception              to false>>
        <<set $_actor.$dofHideStatSneak                   to false>>
        <<set $_actor.$dofHideStatSpeed                   to false>>
        <<set $_actor.$dofHideStatAttack                  to false>>
        <<set $_actor.$dofHideStatDefense                 to false>>
        <<set $_actor.$dofVisibilityRate                  to $dofStatsCount>>

    <<elseif $_visible <= 0>> // no stats are visible
        <<set $_actor.$dofHideStatConstitution            to true>>
        <<set $_actor.$dofHideStatListen                  to true>>
        <<set $_actor.$dofHideStatPerception              to true>>
        <<set $_actor.$dofHideStatSneak                   to true>>
        <<set $_actor.$dofHideStatSpeed                   to true>>
        <<set $_actor.$dofHideStatAttack                  to true>>
        <<set $_actor.$dofHideStatDefense                 to true>>
        <<set $_actor.$dofVisibilityRate                  to 0>>

    <<elseif $_visible > $_actor.$dofVisibilityRate>> // actor became more visible
        <<set $_hidden to 0>>
        <<while $_hidden < $_visible - $_actor.$dofVisibilityRate>>
            <<hagRandom min=$dofStatMinId max=$dofStatMaxId>>
            <<set $_index to result($dofStatMinId)>>
            <<if $_index is $dofStatConstitutionId and not $_actor.$dofHideStatConstitution>>
                <<set $_actor.$dofHideStatConstitution to false>>
                <<set $_hidden to $_hidden+1>>
            <<elseif $_index is $dofStatListenId and not $_actor.$dofHideStatListen>>
                <<set $_actor.$dofHideStatListen to false>>
                <<set $_hidden to $_hidden+1>>
            <<elseif $_index is $dofStatPerceptionId and not $_actor.$dofHideStatPerception>>
                <<set $_actor.$dofHideStatPerception to false>>
                <<set $_hidden to $_hidden+1>>
            <<elseif $_index is $dofStatSneakId and not $_actor.$dofHideStatSneak>>
                <<set $_actor.$dofHideStatSneak to false>>
                <<set $_hidden to $_hidden+1>>
            <<elseif $_index is $dofStatSpeedId and not $_actor.$dofHideStatSpeed>>
                <<set $_actor.$dofHideStatSpeed to false>>
                <<set $_hidden to $_hidden+1>>
            <<elseif $_index is $dofStatAttackId and not $_actor.$dofHideStatAttack>>
                <<set $_actor.$dofHideStatAttack to false>>
                <<set $_hidden to $_hidden+1>>
            <<elseif $_index is $dofStatDefenseId and not $_actor.$dofHideStatDefense>>
                <<set $_actor.$dofHideStatDefense to false>>
                <<set $_hidden to $_hidden+1>>
            <<endif>>
        <<endwhile>>
        <<set $_actor.$dofVisibilityRate                  to $_visible>>

    <<elseif $_visible < $_actor.$dofVisibilityRate>> // actor became more hidden
        <<set $_hidden to 0>>
        <<while $_hidden < $_actor.$dofVisibilityRate - $_visible>>
            <<hagRandom min=$dofStatMinId max=$dofStatMaxId>>
            <<set $_index to result($dofStatMinId)>>
            <<if $_index is $dofStatConstitutionId and not $_actor.$dofHideStatConstitution>>
                <<set $_actor.$dofHideStatConstitution to true>>
                <<set $_hidden to $_hidden+1>>
            <<elseif $_index is $dofStatListenId and not $_actor.$dofHideStatListen>>
                <<set $_actor.$dofHideStatListen to true>>
                <<set $_hidden to $_hidden+1>>
            <<elseif $_index is $dofStatPerceptionId and not $_actor.$dofHideStatPerception>>
                <<set $_actor.$dofHideStatPerception to true>>
                <<set $_hidden to $_hidden+1>>
            <<elseif $_index is $dofStatSneakId and not $_actor.$dofHideStatSneak>>
                <<set $_actor.$dofHideStatSneak to true>>
                <<set $_hidden to $_hidden+1>>
            <<elseif $_index is $dofStatSpeedId and not $_actor.$dofHideStatSpeed>>
                <<set $_actor.$dofHideStatSpeed to true>>
                <<set $_hidden to $_hidden+1>>
            <<elseif $_index is $dofStatAttackId and not $_actor.$dofHideStatAttack>>
                <<set $_actor.$dofHideStatAttack to true>>
                <<set $_hidden to $_hidden+1>>
            <<elseif $_index is $dofStatDefenseId and not $_actor.$dofHideStatDefense>>
                <<set $_actor.$dofHideStatDefense to true>>
                <<set $_hidden to $_hidden+1>>
            <<endif>>
        <<endwhile>>
        <<set $_actor.$dofVisibilityRate                  to $_visible>>

    <<endif>>
===
